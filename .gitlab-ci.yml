# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/README.html#stages

stages:          # List of stages for jobs, and their order of execution
  - build
  # - analyze

variables:
  SONAR_SCANNER_VERSION: "5.0.1.3006"
  NODE_VERSION: "20.10.0"
  DOCKER_DRIVER: overlay2
  IMAGE_TAG: v2

build-job:
  stage: build
  image: docker:latest

  services:
    - docker:dind

  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

  script:
    - echo "Building Docker image..."
    - cd "$CI_PROJECT_DIR/api/gateway" 
    - docker version
    - docker build --tag $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$IMAGE_TAG -f Dockerfile .
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$IMAGE_TAG 

# before_script:
#   - echo "Setup environment"
#   - export NVM_DIR=$HOME/.nvm
#   - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
#   - . $NVM_DIR/nvm.sh
#   - nvm install $NODE_VERSION
#   - nvm use $NODE_VERSION
#   - export PATH=$PATH:$NVM_DIR/versions/node/v${NODE_VERSION}/bin 
#   - curl -L "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip" -o sonar-scanner.zip
#   - unzip sonar-scanner.zip
#   - export PATH=$PATH:$PWD/sonar-scanner-${SONAR_SCANNER_VERSION}-linux/bin

# sonarqube-check:
#   stage: analyze
#   image: 
#     name: sonarsource/sonar-scanner-cli:5.0
#     entrypoint: [""]
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#     GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   script: 
#     - sonar-scanner
#   allow_failure: true
#   rules:
#     - if: $CI_COMMIT_REF_NAME == 'develop' || $CI_PIPELINE_SOURCE == 'merge_request_event'
